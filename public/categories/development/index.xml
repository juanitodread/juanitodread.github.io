<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Development on Juan Sandoval </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://juanitodread.github.io/categories/development/</link>
    <language>en-us</language>
    <author>Juan Antonio Sandoval Delgado</author>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <updated>Mon, 11 Apr 2016 09:36:02 CDT</updated>
    
    <item>
      <title>Type specialization in Scala</title>
      <link>http://juanitodread.github.io/post/type-specialization-scala/</link>
      <pubDate>Mon, 11 Apr 2016 09:36:02 CDT</pubDate>
      <author>Juan Antonio Sandoval Delgado</author>
      <guid>http://juanitodread.github.io/post/type-specialization-scala/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Type Specialization&lt;/strong&gt; in Scala is a mechanism that allows us to increase the performance in our code when we are writing generic code. When we have a generic class definition the compiler needs to set a real type to the generic class, this represents an extra cost.&lt;/p&gt;

&lt;p&gt;When our real type is one of the &lt;em&gt;primitive&lt;/em&gt; types (in Scala primitive types are treated as objects. Wrapped objects) the compiler needs to add appropiate boxing and unboxing operations. Again, this will generate an extra cost.&lt;/p&gt;

&lt;p&gt;Since 2.8, Scala added specialized type parameters. This is just an annotation &lt;code&gt;@specialized&lt;/code&gt; that can be used in any type parameter of a method or class definition. This annotation indicates to the compiler that in adition of the generic version of the class it is necessary to create &lt;em&gt;N&lt;/em&gt; number of specialized versions of the defined class. The N number is determined by the definition of the annotation in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Scala&#34;&gt;class LinkedList[@specialized T] {

  def append(@specialized(Int, Long) node: T): Unit = //...
  // ...

} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, we have defined the generic class with two specialized types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first one is on the definition of the class. Note that the annotation does not have any additional argument in its declaration. This means that the compiler will generate specialized classes version of the class for all the primitive types in Scala.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second one is on the definition of the append method. Here we are adding two arguments: Int and Long. This means that the compiler will generate specialized classes versions of the class for the primitive types Int and Long (int, long).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The compiler derives specialized definitions for all combinations of primitive types. Specialization is performed at the definition site in order to allow separate compilation. Each specialized class is derived from the original definition using specific combination of types and extends the generic class.&lt;/p&gt;

&lt;p&gt;When a generic class is used, first is verified if the class has specialized versions, if so, the specialized class is used whenever possible and boxing process is not performed, incresing the performance of the application at runtime.&lt;/p&gt;

&lt;p&gt;In general I think specialization is a great idea to increase runtime performance in our Scala code, but it also has a cost in compilation time because the compiler needs to generate aditional specialized classes. So use &lt;strong&gt;@specialized&lt;/strong&gt; judiciosly.&lt;/p&gt;

&lt;p&gt;Here are more detailed information about Type Specialization in Scala:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/old/sites/default/files/sids/dragos/Thu,%202010-05-06,%2017:56/sid-spec.pdf&#34;&gt;http://www.scala-lang.org/old/sites/default/files/sids/dragos/Thu,%202010-05-06,%2017:56/sid-spec.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scala-notes.org/2011/04/specializing-for-primitive-types/&#34;&gt;http://www.scala-notes.org/2011/04/specializing-for-primitive-types/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Builder pattern in Scala</title>
      <link>http://juanitodread.github.io/post/builder-pattern-in-scala/</link>
      <pubDate>Thu, 03 Mar 2016 23:47:44 CST</pubDate>
      <author>Juan Antonio Sandoval Delgado</author>
      <guid>http://juanitodread.github.io/post/builder-pattern-in-scala/</guid>
      <description>&lt;p&gt;The &lt;em&gt;Builder Pattern&lt;/em&gt; is a design pattern for create objects. The builder pattern allows to the user the creation of an object that requires a lot of parameters in its constructor.&lt;/p&gt;

&lt;p&gt;The problem with objects that requires different parameters to be constructed is that the programmer will need to overload the constructor to support all the distinct combinations of parameters.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Java&lt;/em&gt; is very common to create a new class (the builder) object that will receives all the parameters and builds a new object with the parameters received. I think the most known builder in Java is &lt;strong&gt;StringBuilder&lt;/strong&gt;. In &lt;strong&gt;Scala&lt;/strong&gt; we can use two Scala features to support a very similar behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case classes&lt;/li&gt;
&lt;li&gt;Pattern matching &lt;em&gt;(Optional, Pattern matching will allow us to restrict invalid object creations)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A very common and simple example for builder objects is to represent pizzas :D. Suppose we need to create pizzas, our pizzas can have different ingredients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozzarella&lt;/li&gt;
&lt;li&gt;Pepperoni&lt;/li&gt;
&lt;li&gt;Bacon&lt;/li&gt;
&lt;li&gt;Mushrooms&lt;/li&gt;
&lt;li&gt;Ham&lt;/li&gt;
&lt;li&gt;Pineapple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is create our pizza model, we will use &lt;strong&gt;case classes&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Scala&#34;&gt;case class Pizza(ingredients: List[String],
                 cheese: String = &amp;quot;Mozzarella&amp;quot;,
                 size: String = &amp;quot;medium&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, any developer can use our pizza class to create pizzas :D&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create three different pizzas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Scala&#34;&gt;val italian = Pizza(List(&amp;quot;Pepperoni&amp;quot;, &amp;quot;Mushrooms&amp;quot;))

val hawaian = Pizza(List(&amp;quot;Ham&amp;quot;, &amp;quot;Pineapple&amp;quot;), size = &amp;quot;Small&amp;quot;)

val meat = Pizza(List(&amp;quot;Ham&amp;quot;, &amp;quot;Bacon&amp;quot;), cheese = &amp;quot;Cheddar&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, now you can create different kind of pizzas without problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scalariform on a Play project</title>
      <link>http://juanitodread.github.io/post/scalariform-playframework-post/</link>
      <pubDate>Wed, 10 Feb 2016 10:28:48 CST</pubDate>
      <author>Juan Antonio Sandoval Delgado</author>
      <guid>http://juanitodread.github.io/post/scalariform-playframework-post/</guid>
      <description>&lt;p&gt;In the last days I have been playing with some powerful tools for start web applications in a fast and easy way that resides on the Cloud. These tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playframework.com/&#34;&gt;Playframework&lt;/a&gt; As my web framework. It is really easy to start a web application on Play and is oriented to REST. Play supports Scala or Java as a language (I recommend to use Scala).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.heroku.com/home&#34;&gt;Heroku&lt;/a&gt; It is really simple to deploy a Scala application. I tried Openshift but is more complicated since they don&amp;rsquo;t have an environment for Scala (You need to use a DIY).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; Really easy and powerful NoSQL database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check the app &lt;a href=&#34;https://crud-lab.herokuapp.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally after some attempts I was able to run my sample application. I was using Atom as my code editor (I needed to add a plugin to recognize the Scala syntax). I can say that Atom is a really good tool to edit Scala files but it doesn&amp;rsquo;t have plugins to format code like Eclipse or Intellij IDEA. Fortunately exists a tool in Scala (&lt;a href=&#34;https://github.com/scala-ide/scalariform&#34;&gt;Scalariform&lt;/a&gt;) to format the code. You can run as an external tool or include in your SBT (Also is the plugin that Eclipse uses to format the code).&lt;/p&gt;

&lt;p&gt;I choosed to run Scalariform from my SBT script. The default behavior is that Scalariform is executed when the code is compiled but you can change the default behavior. I use the default behavior.&lt;/p&gt;

&lt;p&gt;The only thing you need to do is add the Scalariform plugin into the plugins.sbt file. The file is located in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root-play-project/project/plugins.sbt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use the plugin just add this line in &lt;em&gt;plugins.sbt&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;addSbtPlugin(&amp;quot;org.scalariform&amp;quot; % &amp;quot;sbt-scalariform&amp;quot; % &amp;quot;1.6.0&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all!.&lt;/p&gt;

&lt;p&gt;Now on every project compilation Scalariform will format all the Scala code :D. You can modify the default settings of Scalariform if you want a different style. The recommendation is to use the &lt;a href=&#34;http://docs.scala-lang.org/style/declarations.html&#34;&gt;Scala Style Guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First post</title>
      <link>http://juanitodread.github.io/post/first-post/</link>
      <pubDate>Wed, 30 Sep 2015 00:38:49 CDT</pubDate>
      <author>Juan Antonio Sandoval Delgado</author>
      <guid>http://juanitodread.github.io/post/first-post/</guid>
      <description>&lt;p&gt;Well these are my first steps with &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;. I really like how &lt;strong&gt;hugo&lt;/strong&gt; is designed and how you have to work with it.&lt;/p&gt;

&lt;p&gt;I have an old blog with Blogger but at this point I decided to use &lt;em&gt;github pages&lt;/em&gt; and work with hugo to generate static content like this ;).&lt;/p&gt;

&lt;p&gt;I’m still learning hugo due today I just know the basics &lt;em&gt;(really basics)&lt;/em&gt; steps in hugo.&lt;/p&gt;

&lt;p&gt;I hope add more and more content to this blog. My idea is to write about software development and share a lot of my knowledge. My next steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable comments&lt;/li&gt;
&lt;li&gt;Start my resume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here we have a bit of code :D&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Hello world in Scala

object Main {
  def main(args: Array[String]): Unit = {
    println(&amp;quot;Hello world!!!... and welcome to this blog ;)&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
